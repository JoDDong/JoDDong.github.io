I">(<p>대표적으로 O(logN)의 시간 복잡도를 가지는 소팅 알고리즘</p>

<h2 id="방법">방법</h2>

<p>분할 정복(Devide &amp; Conquer)을 이용하는 알고리즘이다.
주어진 배열을 원소가 하나 밖에 남지 않을 때 까지 1/2로 쪼갠 후에, 재귀를 이용해 돌아가며 원래 크기의 배율로 합칠 때 정렬을 수행한다.</p>

<h3 id="example">Example</h3>

<ol>
  <li>만일 아래와 같이 8개의 숫자로 이루어진 배열이 있을 경우
 [5, 2, 7, 3, 8, 1, 10, 4]</li>
  <li>하나의 배열을 둘로 쪼갠다.
[5, 2, 7, 3] [8, 1, 10, 4]</li>
  <li>이후 두 개의 배열을 다시 각각 둘로 쪼개고
 [5, 2] [7, 3] [8, 1] [10, 4]</li>
  <li>네 개의 배열을 다시 각각 둘로 쪼개면 한개씩의 배열이 만들어진다.
 [5] [2] [7] [3] [8] [1] [10] [4]</li>
  <li>더 이상 쪼갤 수 없으므로 두 개씩 합치기를 시작한다. 합칠 때는 작은 수를 앞으로 한다.
 [2, 5] [3, 7] [1, 8] [4, 10]</li>
  <li>다시 네 개의 배열을 두 개로 합친다. 합칠 배열의 각 값을 비교하여 작은 숫자를 먼저 넣으면 정렬된 배열이 만들어진다.
 [2, 3, 5, 7] [1, 4, 8, 10]</li>
  <li>두 개의 배열을 하나로 합치면 최종적으로 정렬이 완료된 배열이 생긴다.
 [1, 2, 3, 4, 5, 7, 8, 10]</li>
</ol>

<h2 id="알고리즘의-특성">알고리즘의 특성</h2>

<ol>
  <li>알거리즘은 Split과 Merge 단계로 나뉘어 구성이 된다</li>
  <li>Split은 절반씩 분해해 나가기 때문에 O(logN)의 시간 복잡도를 가지며, Merge의 경우 모든 값을 비교해야 하기 때문에 O(N) 시간 복잡도를 가진다.
즉, 총 시간 복잡도는 O(NlogN)이 된다.</li>
  <li>추가적인 공간을 가지고 해당 공간에 값을 담기 때문에, swap이 발생하지 않는다.</li>
</ol>

<h2 id="알고리즘의-구현">알고리즘의 구현</h2>

<ul>
  <li>기본적으로 재귀를 이용하여 알고리즘을 구현한다.</li>
  <li>배열을 더 이상 나눌 수 없을 때 까지 split한 후, merge를 수행하며, 이 때의 재귀 기저 조건은 배열의 크기가 1 (기본 배열에 따라 크기가 2보다 작을 때로 한다)일 때 이다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">MergeSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    		<span class="n">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    	<span class="o">}</span>
    	
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
    	<span class="k">if</span><span class="o">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
    		<span class="k">return</span><span class="o">;</span>
    	<span class="o">}</span>
    	
    	<span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">high</span> <span class="o">+</span> <span class="n">low</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
    	<span class="n">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
    	<span class="n">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">high</span><span class="o">);</span>
    	<span class="n">merge</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">high</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mid</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
    	<span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">high</span><span class="o">-</span><span class="n">low</span><span class="o">];</span>
    	<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">l</span> <span class="o">=</span> <span class="n">low</span><span class="o">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
    	
    	<span class="k">while</span><span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
    		<span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">h</span><span class="o">])</span> <span class="o">{</span>
    			<span class="n">temp</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">l</span><span class="o">++];</span>
    		<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
    			<span class="n">temp</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">h</span><span class="o">++];</span>
    		<span class="o">}</span>
    	<span class="o">}</span>
    	
    	<span class="k">while</span><span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="o">)</span> <span class="o">{</span>
    		<span class="n">temp</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">l</span><span class="o">++];</span>
    	<span class="o">}</span>
    	<span class="k">while</span><span class="o">(</span><span class="n">h</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
    		<span class="n">temp</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">h</span><span class="o">++];</span>
    	<span class="o">}</span>
    	
    	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">low</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    		<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">low</span><span class="o">];</span>
    	<span class="o">}</span>
    <span class="o">}</span>

    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
    <span class="nc">MergeSort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 2 3 4 5 7 8 10]
</code></pre></div></div>
:ET